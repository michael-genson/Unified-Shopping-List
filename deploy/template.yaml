AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Unified Shopping List Application Stack

Parameters:
  ### AWS ###
  ApiLambdaName:
    Type: String

  AwsRegion:
    Type: String

  UsersDDBTableName:
    Type: String

  AlexaCallbackDDBTableName:
    Type: String

  SyncEventSQSQueueName:
    Type: String

  SyncEventDevSQSQueueName:
    Type: String

  ### Settings ###

  Whitelist:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  ### Secrets ###

  # Database
  DBSecretKey:
    Type: String

  DBAlgorithm:
    Type: String

  # SMTP
  SmtpServer:
    Type: String

  SmtpPort:
    Type: Number

  SmtpSender:
    Type: String

  SmtpUsername:
    Type: String

  SmtpPassword:
    Type: String

  # Access
  AppClientId:
    Type: String

  AppClientSecret:
    Type: String

  EmailWhitelist:
    Type: String

  # Alexa
  AlexaClientId:
    Type: String

  AlexaClientSecret:
    Type: String

  AlexaSkillId:
    Type: String

  # Todoist
  TodoistClientId:
    Type: String

  TodoistClientSecret:
    Type: String

Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ApiLambdaName
      CodeUri: ../AppLambda
      Handler: src.app.handler
      Timeout: 60  # <= SQS VisibilityTimeout / Lambda Event BatchSize
      Environment:
        Variables:
          aws_region: !Ref AwsRegion

          sync_event_sqs_queue_name: !GetAtt SyncEventQueue.QueueName
          sync_event_dev_sqs_queue_name: !Ref SyncEventDevSQSQueueName
          use_whitelist: !Ref Whitelist

          db_secret_key: !Ref DBSecretKey
          db_algorithm: !Ref DBAlgorithm

          smtp_server: !Ref SmtpServer
          smtp_port: !Ref SmtpPort
          smtp_sender: !Ref SmtpSender
          smtp_username: !Ref SmtpUsername
          smtp_password: !Ref SmtpPassword

          app_client_id: !Ref AppClientId
          app_client_secret: !Ref AppClientSecret
          email_whitelist: !Ref EmailWhitelist

          alexa_client_id: !Ref AlexaClientId
          alexa_client_secret: !Ref AlexaClientSecret
          alexa_skill_id: !Ref AlexaSkillId

          todoist_client_id: !Ref TodoistClientId
          todoist_client_secret: !Ref TodoistClientSecret

          

      Policies:
        # DDB resources not deployed via SAM
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDDBTableName

        - DynamoDBCrudPolicy:
            TableName: !Ref AlexaCallbackDDBTableName

        - SQSSendMessagePolicy:
            QueueName: !GetAtt SyncEventQueue.QueueName

        - SQSSendMessagePolicy:
            QueueName: !Ref SyncEventDevSQSQueueName

      Runtime: python3.9
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api

        SyncEventQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SyncEventQueue.Arn
            BatchSize: 10  # <= SQS VisibilityTimeout / Lambda Timeout

  Api:
    Type: AWS::Serverless::HttpApi

  SyncEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SyncEventSQSQueueName
      ContentBasedDeduplication: false
      DeduplicationScope: messageGroup
      DelaySeconds: 5
      FifoQueue: true
      FifoThroughputLimit: perMessageGroupId
      MessageRetentionPeriod: 600
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 600  # >= Lambda Timeout * Lambda Event BatchSize

Outputs:
  ApiUrl:
    Description: URL of your API
    Value:
      Fn::Sub: 'https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'

  SyncEventQueueURL:
    Description: URL of the SyncEvent FIFO Queue
    Value:
      Fn::GetAtt: SyncEventQueue.QueueUrl
